mutate(bias.ksay = -bias.ksay) %>%
bind_rows(r.over) %>%
mutate(cost = factor(cost, levels=c("quadratic","linear")))
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|k), data=r.comb)) #beta = -4.24, t(129) = -3.51, p < 0.001
trials.stat <- trials %>%
mutate(bias = case_when(roleCurrent == "receiver" ~ kest - ksay,
roleCurrent == "sender" ~ ksay - k),
bias.isPositive = bias > 0,
bias = ifelse(roleCurrent == "receiver", -bias, bias),
abs.bias = abs(bias),
goal = as.factor(goal),
goal.c = goal,
cost = as.factor(cost))
summary(lmer(bias ~ roleCurrent + (1|subjID), data=trials.stat)) #no signif
summary(lmer(abs.bias ~ roleCurrent + (1|subjID), data=trials.stat)) #signif
full.model = lmer(abs.bias ~ goal + cost + roleCurrent + (1|subjID), data=trials.stat)
noRole.model = lmer(abs.bias ~ goal + cost + (1|subjID), data=trials.stat)
anova(full.model, noRole.model, test="LRT")
r.2 <- receiver %>%
mutate(cost = paste(cost, "cost"),
goal = paste(goal, "goal"))
abline.col = "gray40"
ai.col = "black"
ggplot(r.2, aes(x=k, y=kest, colour=cond)) +
geom_abline(slope=1, colour=abline.col, size=0.3) +
# geom_jitter(data=r2, aes(x=k, y=ksay), colour=ai.col, size=0.1, alpha=0.2) +
geom_jitter(size=0.5, alpha=0.1) +
geom_smooth(data=r.2, aes(x=k, y=ksay), method="lm", se=FALSE, size=1, colour=ai.col, alpha=0.5) +
geom_smooth(method="lm", se=FALSE, size=1) +
geom_hline(aes(yintercept=-Inf), colour="black", size=0.5, linetype="solid") +
geom_vline(aes(xintercept=-Inf), colour="black", size=0.5, linetype="solid") +
scale_x_continuous("Actual Truth", limits=c(0,100), expand=c(0,0)) +
scale_y_continuous("Inferred Truth", limits=c(0,100), expand=c(0,0)) +
scale_colour_manual(values=condcolors) +
guides(colour=FALSE) +
facet_grid(cost ~ goal) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white", colour="white"),
strip.background = element_rect(fill=panelcolor),
strip.text = element_text(size=15, family="Optima"),
panel.spacing = unit(1, "lines"),
axis.title = element_text(size=15, family="Optima"),
axis.text = element_text(size=11, family="Optima"))
ggsave("img/final/bias_lines.png", width=6,height=5.6)
condcolors2 = c("#679cd0","#003c70","#cc7667","#8b2f00")
s2 <- sender %>%
group_by(subjID, cost, goal, cond) %>%
summarise(mean.ksay = mean(ksay-k))
c(min(s2$mean.ksay),max(s2$mean.ksay))
r2 <- receiver %>%
group_by(subjID) %>%
summarise(mean.kest = mean(kest-ksay))
c(min(r2$mean.kest),max(r2$mean.kest))
sr.2 <- s2 %>%
left_join(r2) %>%
mutate(cond = paste(cost, goal),
cond = factor(cond,
levels=c("linear underestimate",
"quadratic underestimate",
"linear overestimate",
"quadratic overestimate")))
sr.2.summ <- sr.2 %>%
group_by(cond) %>%
summarise(r.mean = mean(mean.kest),
r.se = sd(mean.kest)/sqrt(n()),
s.mean = mean(mean.ksay),
s.se = sd(mean.ksay)/sqrt(n()))
ggplot(sr.2, aes(x=mean.ksay, y=mean.kest, colour=cond)) +
geom_hline(yintercept=0, colour="gray40", size=0.3) +
geom_vline(xintercept=0, colour="gray40", size=0.3) +
geom_point(size=1, alpha=0.3, show.legend = FALSE) +
# geom_smooth(method="lm") +
stat_ellipse(size=0.6) +
geom_point(data=sr.2.summ, aes(x=s.mean, y=r.mean, fill=cond),
shape=23, colour="black", size=2.5) +
# geom_linerange(data=sr.2.summ,
#                aes(x=s.mean, y=r.mean, ymin=r.mean-r.se, ymax=r.mean+r.se),
#                size=0.8, show.legend = FALSE) +
# geom_linerange(data=sr.2.summ,
#                aes(x=s.mean, xmin=s.mean-s.se, xmax=s.mean+s.se, y=r.mean),
#                size=0.8, show.legend = FALSE) +
scale_x_continuous("Individual Sender's Mean *Report - Truth*", limits=c(-45, 45)) +
scale_y_continuous("Individual Judge's Mean *Inferred - Report*",
limits=c(-45, 45)) +
scale_colour_manual("", values=condcolors2) +
scale_fill_manual("", values=condcolors2) +
# facet_wrap(~cost) +
theme_classic() +
theme(legend.position = c(0.74, 0.88),
strip.background = element_rect(fill=panelcolor),
text=element_text(size=13, family="Optima"),
axis.title.x = element_markdown(),
axis.title.y = element_markdown())
ggsave("img/final/indiv_lambda.png", width=5, height=4.5)
# sb <- sender %>%
#   mutate(bias.ksay = ksay-k)
# rb <- receiver %>%
#   mutate(bias.kest = kest-ksay)
s3 <- sender %>%
group_by(cost, goal) %>%
summarise(mean.ksay = mean(ksay-k))
r3 <- receiver %>%
group_by(cost, goal) %>%
summarise(mean.kest = mean(kest-ksay))
comp.aggr <- s3 %>%
left_join(r3) %>%
rename(aggr.ksay = mean.ksay,
aggr.kest = mean.kest)
comp.aggr
cor.test(comp.aggr$aggr.ksay, comp.aggr$aggr.kest) # r = -0.98, t(2) = -7.77, p = 0.016
sr.2.groups <- sr.2 %>%
left_join(comp.aggr, by=c("cost","goal")) %>%
mutate(corr.ksay = mean.ksay - aggr.ksay, #distance to aggregated means
corr.kest = mean.kest - aggr.kest)
cor.test(sr.2.groups$corr.ksay, sr.2.groups$corr.kest) # r = -0.57, t(129) = -7.79, p < 0.0001
cor(sr.2.groups$corr.ksay, sr.2.groups$corr.kest)^2
sender
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=goal, fill=cost)) +
geom_point(shape=20) +
facet_wrap(~subjID)
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=goal, fill=cost)) +
geom_point(shape=21) +
facet_wrap(~subjID)
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=goal, fill=cost)) +
geom_point(shape=21)
sender %>%
mutate(bias = ksay-k)
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(shape=21)
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point()
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2)
sender %>%
mutate(bias = ksay-k) %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth()
receiver %>%
mutate(bias = kest-ksay) %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth()
sender
sender <- trials %>% filter(roleCurrent=="sender") %>%
mutate(bias = ksay-k)
receiver <- trials %>% filter(roleCurrent=="receiver") %>%
mutate(bias = kest-ksay)
sender %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth()
receiver %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth()
summary(lmer(bias ~ trialNumber * cond, data=sender))
lmer(bias ~ trialNumber * cond, data=sender)
lmer(bias ~ trialNumber * cond + (1|subjID), data=sender)
summary(lmer(bias ~ trialNumber * cond + (1|subjID), data=sender))
summary(lmer(bias ~ trialNumber * cond + (1|subjID), data=receiver))
trials
sender %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth()
summary(lmer(bias ~ trialNumber * cond + (1|subjID), data=sender))
sender %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth() +
scale_colour_manual("", values=condcolors2)
receiver %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth() +
scale_colour_manual("", values=condcolors2)
sender %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth() +
scale_colour_manual("", values=condcolors2) +
facet_wrap(~cond, scales="free")
receiver %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth(colour="black") +
scale_colour_manual("", values=condcolors2)
sender %>%
ggplot(aes(x=trialNumber, y=bias, colour=cond)) +
geom_point(size=0.2) +
geom_smooth(colour="black") +
scale_colour_manual("", values=condcolors2) +
facet_wrap(~cond, scales="free")
for(c in unique(sender$cond)){
summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(receiver, cond==c)))
}
summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
learn.df <- data.frame()
for(c in unique(sender$cond)){
s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(receiver, cond==c)))
learn.df <- learn.df %>%
bind_rows(data.frame(
cond = rep(c, 2),
role = c("sender","receiver"),
trialNumber.est = c(s.learn@coef["trialNumber","Estimate"], r.learn@coef["trialNumber","Estimate"]),
trialNumber.se = c(s.learn@coef["trialNumber","Std. Error"], r.learn@coef["trialNumber","Std. Error"]),
trialNumber.t = c(s.learn@coef["trialNumber","t value"], r.learn@coef["trialNumber","t value"]),
trialNumber.pvalue = c(s.learn@coef["trialNumber","Pr(>|t|)"], r.learn@coef["trialNumber","Pr(>|t|)"])
))
}
learn.df <- data.frame()
for(c in unique(sender$cond)){
s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(receiver, cond==c)))
learn.df <- learn.df %>%
bind_rows(data.frame(
cond = rep(c, 2),
role = c("sender","receiver"),
trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
))
}
learn.df
learn.df %>%
mutate(trialNumber.pvalue < 0.05)
for(i in unique(trial$subjID)){
subj.df <- trial %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(role == "sender")
subj.r.df <- subj.df %>%
filter(role == "receiver")
# s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
# r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(receiver, cond==c)))
# learn.df <- learn.df %>%
#   bind_rows(data.frame(
#     cond = rep(c, 2),
#     role = c("sender","receiver"),
#     trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
#     trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
#     trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
#     trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
#   ))
}
for(i in unique(trials$subjID)){
subj.df <- trials %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(role == "sender")
subj.r.df <- subj.df %>%
filter(role == "receiver")
# s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
# r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(receiver, cond==c)))
# learn.df <- learn.df %>%
#   bind_rows(data.frame(
#     cond = rep(c, 2),
#     role = c("sender","receiver"),
#     trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
#     trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
#     trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
#     trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
#   ))
}
trials
for(i in unique(trials$subjID)){
subj.df <- trials %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(roleCurrent == "sender")
subj.r.df <- subj.df %>%
filter(roleCurrent == "receiver")
# s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(sender, cond==c)))
# r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=filter(receiver, cond==c)))
# learn.df <- learn.df %>%
#   bind_rows(data.frame(
#     cond = rep(c, 2),
#     role = c("sender","receiver"),
#     trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
#     trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
#     trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
#     trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
#   ))
}
this.cond
learn.df <- data.frame()
for(i in unique(trials$subjID)){
subj.df <- trials %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(roleCurrent == "sender")
subj.r.df <- subj.df %>%
filter(roleCurrent == "receiver")
s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=subj.s.df))
r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=subj.r.df))
learn.df <- learn.df %>%
bind_rows(data.frame(
cond = rep(this.cond, 2),
role = c("sender","receiver"),
trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
))
}
learn.df <- data.frame()
for(i in unique(trials$subjID)){
subj.df <- trials %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(roleCurrent == "sender") %>%
mutate(bias = ksay-k)
subj.r.df <- subj.df %>%
filter(roleCurrent == "receiver") %>%
mutate(bias = kest-ksay)
s.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=subj.s.df))
r.learn <- summary(lmer(bias ~ trialNumber + (1|subjID), data=subj.r.df))
learn.df <- learn.df %>%
bind_rows(data.frame(
cond = rep(this.cond, 2),
role = c("sender","receiver"),
trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
))
}
summary(lmer(bias ~ trialNumber + (1|subjID), data=subj.s.df))
subj.s.df
learn.df <- data.frame()
for(i in unique(trials$subjID)){
subj.df <- trials %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(roleCurrent == "sender") %>%
mutate(bias = ksay-k)
subj.r.df <- subj.df %>%
filter(roleCurrent == "receiver") %>%
mutate(bias = kest-ksay)
s.learn <- summary(lm(bias ~ trialNumber, data=subj.s.df))
r.learn <- summary(lm(bias ~ trialNumber, data=subj.r.df))
learn.df <- learn.df %>%
bind_rows(data.frame(
cond = rep(this.cond, 2),
role = c("sender","receiver"),
trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
))
}
learn.df
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05)
learn.df <- data.frame()
for(i in unique(trials$subjID)){
subj.df <- trials %>%
filter(subjID == i)
this.cond <- unique(subj.df$cond)
subj.s.df <- subj.df %>%
filter(roleCurrent == "sender") %>%
mutate(bias = ksay-k)
subj.r.df <- subj.df %>%
filter(roleCurrent == "receiver") %>%
mutate(bias = kest-ksay)
s.learn <- summary(lm(bias ~ trialNumber, data=subj.s.df))
r.learn <- summary(lm(bias ~ trialNumber, data=subj.r.df))
learn.df <- learn.df %>%
bind_rows(data.frame(
subjID = rep(unique(subj.df$subjID), 2),
cond = rep(unique(subj.df$cond), 2),
role = c("sender","receiver"),
trialNumber.est = c(coef(s.learn)["trialNumber","Estimate"], coef(r.learn)["trialNumber","Estimate"]),
trialNumber.se = c(coef(s.learn)["trialNumber","Std. Error"], coef(r.learn)["trialNumber","Std. Error"]),
trialNumber.t = c(coef(s.learn)["trialNumber","t value"], coef(r.learn)["trialNumber","t value"]),
trialNumber.pvalue = c(coef(s.learn)["trialNumber","Pr(>|t|)"], coef(r.learn)["trialNumber","Pr(>|t|)"])
))
}
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
ggplot(aes(x=cond, y=trialNumber.est, colour=signif)) +
geom_point() +
facet_wrap(~role)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
na_omit() %>%
ggplot(aes(x=cond, y=trialNumber.est, colour=signif)) +
geom_point() +
facet_wrap(~role)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
na.omit() %>%
ggplot(aes(x=cond, y=trialNumber.est, colour=signif)) +
geom_point() +
facet_wrap(~role)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
na.omit() %>%
ggplot(aes(x=cond, y=trialNumber.t)) +
geom_violin() +
facet_wrap(~role)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
na.omit()
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
na.omit() %>%
count(signif)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
na.omit() %>%
count(role, signif)
learn.df %>%
mutate(trialNumber.est = round(trialNumber.est, 2),
signif = trialNumber.pvalue < 0.05) %>%
# na.omit() %>%
count(role, signif)
setwd("/Users/loey/Desktop/Research/FakeNews/WhatIsReality/Exp2/analysis/")
library(tidyverse)
raw <- read_csv("pilot.csv")
glimpse(raw)
catch <- raw %>%
filter(catchKey != -1) %>%
mutate(trialNumber = ifelse(exptPart == "practice", trialNumber - 3, trialNumber)) %>%
select(subjID, trialNumber, catchQuestion, catchKey, catchResponse) %>%
mutate(catchQuestion = ifelse(catchQuestion == "How many <b class=\"r\">red</b> marbles did you actually draw (before any changes)?",
"How many red marbles did you actually draw (before any changes)?",
"How many red marbles did your opponent report drawing?"),
catchQ = ifelse(catchQuestion == "How many <b class=\"r\">red</b> marbles did you actually draw (before any changes)?",
"actually drawn", "opponent report"))
count(catch, subjID) %>%
arrange(n)
raw %>%
nrow()
catchdf <- catch %>%
group_by(subjID) %>%
summarise(accuracy = sum(abs(catchResponse-catchKey) <= 5) / n())
catchdf %>%
count(accuracy < .75)
catchdf %>%
filter(accuracy < .75)
trials <- raw %>%
filter(exptPart == "trial") %>%
rename(k = drawnRed,
ksay = reportedRed,
kest = inferredRed)
length(unique(trials$subjID))
trials <- raw %>%
filter(exptPart == "trial") %>%
rename(k = drawnRed,
ksay = reportedRed,
kest = inferredRed)
trials
# receiver data out of bounds (0 <= x <= 100)
r.error <- trials %>%
filter(roleCurrent=="receiver", (kest < 0 | kest > 100)) %>%
group_by(subjID) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
distinct(subjID) %>%
pull(subjID)
# sender data out of bounds (0 <= x <= 100)
s.error <- trials %>%
filter(roleCurrent=="sender", (ksay < 0 | ksay > 100)) %>%
group_by(subjID) %>%
summarise(n = n()) %>%
filter(n > 1) %>% # remove subjects with multiple out of bound trials, remove individual trials for other subjects
distinct(subjID) %>%
pull(subjID)
trials <- trials %>%
left_join(catchdf) %>%
filter(accuracy >= 0.75,
!subjID %in% r.error,
!subjID %in% s.error,
# subjID != "sona-28750", #guessed the same numbers
ksay > 0, ksay < 100,
kest > 0, kest < 100)
sender <- filter(trials, roleCurrent=="sender")
receiver <- filter(trials, roleCurrent=="receiver")
