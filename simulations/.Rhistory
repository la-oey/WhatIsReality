#geom_smooth(method="lm", formula = y ~ poly(x,2), se=F) +
# geom_text(data=filter(var.decep.df, round(logratio,8) == 1),
#           aes(x=log10(11), y=r.kest_k.var, label=a_lab),
#           family="Optima", size=3, hjust=0) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
limits=c(-1,1),
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Variance in Truth Inference", limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0), "cm"))
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(x=0, y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.3,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(x=0, y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,-0.5,1.3,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(x=0, y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0.5,1.3,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(x=0, y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,1,1.3,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(x=0, y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.3,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(x=0, y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.92,0.08))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab),
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.92,0.08))
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.92,0.08))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.bias.fig2 <- decep.df_bytype %>%
mutate(logratio = round(log10(a/-m),10)) %>%
group_by(bias_type, logratio) %>%
summarise(max_bias = max(bias),
min_bias = min(bias)) %>%
ggplot(aes(x=logratio)) +
geom_rect(aes(xmin=-Inf, xmax=1, ymin=-Inf, ymax=0), fill="gray40") +
geom_segment(data=manual_grid_line, aes(x=-Inf, xend=Inf, y=y, yend=y), colour="gray60") +
geom_ribbon(aes(ymin=min_bias,  ymax=max_bias, fill=bias_type, colour=bias_type)) +
#geom_smooth(aes(x = log10(a/-m), y=bias, colour=bias_type)) +
geom_text(data=NULL,
aes(x=0.99, y=0.54, label="sender's bias introduced to message given the truth (ksay - k)"),
family="Optima", size=4, hjust=1) +
geom_text(data=NULL,
aes(x=0.99, y=-0.13, label="judge's accuracy of estimate given the truth (kest - k)"),
family="Optima", colour="white", size=4, hjust=1) +
geom_text(data=NULL,
aes(x=0.99, y=-0.44, label="judge's bias correction to estimate given the message (kest - ksay)"),
family="Optima", colour="white", size=4, hjust=1) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Bias", limits=c(-0.55,0.55), breaks=seq(-0.5,0.5,0.25)) +
scale_fill_manual(values=c("forestgreen","sandybrown","brown")) +
scale_colour_manual(values=darken(c("forestgreen","sandybrown","brown"))) +
guides(fill=FALSE, colour=FALSE) +
theme_classic() +
theme(plot.margin = unit(c(0.5,1.5,0.5,0.5), "cm"))
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0.5,1.4,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2.graph <- var.decep.df %>%
ggplot(aes(x = logratio, y=r.kest_k.var, colour=a_lab)) +
#geom_point() +
geom_line() +
#geom_smooth(se=F) +
#geom_smooth(method="lm", formula = y ~ poly(x,2), se=F) +
# geom_text(data=filter(var.decep.df, round(logratio,8) == 1),
#           aes(x=log10(11), y=r.kest_k.var, label=a_lab),
#           family="Optima", size=3, hjust=0) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
limits=c(-1,1),
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Variance in Truth Inference", limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0), "cm"))
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0.5,1.4,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2.graph <- var.decep.df %>%
ggplot(aes(x = logratio, y=r.kest_k.var, colour=a_lab)) +
#geom_point() +
geom_line() +
#geom_smooth(se=F) +
#geom_smooth(method="lm", formula = y ~ poly(x,2), se=F) +
# geom_text(data=filter(var.decep.df, round(logratio,8) == 1),
#           aes(x=log10(11), y=r.kest_k.var, label=a_lab),
#           family="Optima", size=3, hjust=0) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
limits=c(-1,1),
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Variance in Truth Inference", limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0), "cm"))
ratio.var.fig2.graph <- var.decep.df %>%
ggplot(aes(x = logratio, y=r.kest_k.var, colour=a_lab)) +
#geom_point() +
geom_line() +
#geom_smooth(se=F) +
#geom_smooth(method="lm", formula = y ~ poly(x,2), se=F) +
# geom_text(data=filter(var.decep.df, round(logratio,8) == 1),
#           aes(x=log10(11), y=r.kest_k.var, label=a_lab),
#           family="Optima", size=3, hjust=0) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
limits=c(-1,1),
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Variance in Truth Inference", limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0), "cm"))
ratio.var.fig2.graph <- var.decep.df %>%
ggplot(aes(x = logratio, y=r.kest_k.var, colour=a_lab)) +
#geom_point() +
geom_line() +
#geom_smooth(se=F) +
#geom_smooth(method="lm", formula = y ~ poly(x,2), se=F) +
# geom_text(data=filter(var.decep.df, round(logratio,8) == 1),
#           aes(x=log10(11), y=r.kest_k.var, label=a_lab),
#           family="Optima", size=3, hjust=0) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
limits=c(-1,1),
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Variance in Truth Inference", limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ratio.var.fig2.graph <- var.decep.df %>%
ggplot(aes(x = logratio, y=r.kest_k.var, colour=a_lab)) +
#geom_point() +
geom_line() +
#geom_smooth(se=F) +
#geom_smooth(method="lm", formula = y ~ poly(x,2), se=F) +
# geom_text(data=filter(var.decep.df, round(logratio,8) == 1),
#           aes(x=log10(11), y=r.kest_k.var, label=a_lab),
#           family="Optima", size=3, hjust=0) +
scale_x_continuous("Ratio of Intended Accuracy (a) to Message Cost (m)",
limits=c(-1,1),
breaks=c(-1,log10(1/2.5),0,log10(2.5),1),
labels=c("1 to 10", "1 to 2.5", "1 to 1", "2.5 to 1", "10 to 1"),
expand=c(0,0)) +
scale_y_continuous("Variance in Truth Inference", limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.6), "cm"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_classic() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"))
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"),
plot.background = element_rect(fill="white"))
ratio.var.fig2.labels
ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"),
plot.background = element_rect(fill="white", colour="white"))
ratio.var.fig2.labels <- ggplot(data=filter(var.decep.df, round(logratio,8) == 1),
aes(y=r.kest_k.var, colour=a_lab)) +
geom_text(aes(label=a_lab), x=0,
family="Optima", size=3, hjust=0) +
scale_y_continuous("",limits=c(0,0.12), expand=c(0,0)) +
scale_colour_manual(values=rainb) +
guides(colour=F) +
theme_void() +
theme(plot.margin = unit(c(0.5,0,1.4,0), "cm"),
plot.background = element_rect(fill="white", colour="white"))
ratio.var.fig2 <- plot_grid(ratio.var.fig2.graph, ratio.var.fig2.labels,
nrow=1, rel_widths=c(0.95,0.05))
ratio.var.fig2
plot_grid(ratio.bias.fig2, ratio.var.fig2, nrow=2, labels=c("a","b"))
ggsave("img/ratios2.png",width=8,height=10)
agent.LN(1,1,-1,2,3)[[3]]
agent.LN(1,1,-1,2,3)[[3]]
agent.LN(1,1,-1,2,3)[[3]][,1]
var(agent.LN(1,1,-1,2,3)[[3]][,1])
agent.LN(1,1,-1,2,3)[[3]][,1]
agent.LN(1,1,-1,2,3)[[3]]
agent.LN(1,1,-1,2,3)
r.0()
# depth is 0-indexed
agent.LN <- function(a, alph, m, mu, depth, coop=FALSE){
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
if(depth > 0){
for(d in 2:(depth+1)){
store.s.ksay_k[,,d] = sender(a, alph, m, mu, store.r.kest_ksay[,,d-1], coop)
store.r.kest_ksay[,,d] = receiver(store.s.ksay_k[,,d])
store.r.kest_k[,,d] = receiver.k(store.s.ksay_k[,,d])
}
}
# return last level of sender and receivers
return(list(store.s.ksay_k[,,depth+1], # [[1]] returns depth-level sender
store.r.kest_ksay[,,depth+1], # [[2]] returns depth-level receiver
store.r.kest_k[,,depth+1])) # [[3]] returns depth-level receiver
}
agent.LN(1,1,-1,2,5) # 5th level deceptive agent
agent.LN(-1,2,0,0,1) # 2nd level cooperative agent
agent.LN(1,1,-1,2,5) # 5th level deceptive agent
# sender's utility
u.S <- function(ksay, k, kest,
a, alph,
m, mu,
coop){
rw = kest - k
mw = ksay - k
# preserves sign when alph is even
rw.pow = ifelse(alph %% 2 == 0 & rw < 0 & !coop, -(rw^alph), rw^alph)
a * rw.pow + m * abs(mw)^mu
#a * rw^alph + m * abs(mw)^mu
}
# sender's utility
u.S <- function(ksay, k, kest,
a, alph,
m, mu){ #coop
rw = kest - k
mw = ksay - k
# preserves sign when alph is even
#rw.pow = ifelse(alph %% 2 == 0 & rw < 0 & !coop, -(rw^alph), rw^alph)
#a * rw.pow + m * abs(mw)^mu
a * rw^alph + m * abs(mw)^mu
}
## Sender P(ksay|k)
# to run with even alph, need to preserve sign (coop Boolean)
sender = function(a, alph, m, mu,
p.R.kest_ksay){ #x(rows) = ksay, y(cols) = k, z(list) = kest
arr.pR <- aperm(array(rep(p.R.kest_ksay, each=n), dim=c(n,n,n)), c(3,1,2))
arr.uS <- array(
u.S(ns,
rep(rep(ns, each=n), n),
rep(ns, each=n*n),
a, alph, m, mu),
dim=c(n,n,n))
EV = apply(arr.uS * arr.pR, MARGIN=c(1,2), FUN=sum)
apply(EV, MARGIN=2, softmax, softmax.param) # listsums -> 2D arr, x(rows) = ksay, y(cols) = k
}
agent.LN <- function(a, alph, m, mu, depth){
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
if(depth > 0){
for(d in 2:(depth+1)){
store.s.ksay_k[,,d] = sender(a, alph, m, mu, store.r.kest_ksay[,,d-1])
store.r.kest_ksay[,,d] = receiver(store.s.ksay_k[,,d])
store.r.kest_k[,,d] = receiver.k(store.s.ksay_k[,,d])
}
}
# return last level of sender and receivers
return(list(store.s.ksay_k[,,depth+1], # [[1]] returns depth-level sender
store.r.kest_ksay[,,depth+1], # [[2]] returns depth-level receiver
store.r.kest_k[,,depth+1])) # [[3]] returns depth-level receiver
}
agent.LN(1,1,-1,2,5) # 5th level deceptive agent
agent.LN(-1,2,0,0,1) # 2nd level cooperative agent
agent.LN(1,1,-1,2,5) # 5th level deceptive agent
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
# depth is 0-indexed
agent.LN <- function(a, alph, m, mu, depth){
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
if(depth > 0){
for(d in 2:(depth+1)){
store.s.ksay_k[,,d] = sender(a, alph, m, mu, store.r.kest_ksay[,,d-1])
print(store.s.ksay_k[,,d])
store.r.kest_ksay[,,d] = receiver(store.s.ksay_k[,,d])
print(store.r.kest_ksay[,,d])
store.r.kest_k[,,d] = receiver.k(store.s.ksay_k[,,d])
}
}
# return last level of sender and receivers
return(list(store.s.ksay_k[,,depth+1], # [[1]] returns depth-level sender
store.r.kest_ksay[,,depth+1], # [[2]] returns depth-level receiver
store.r.kest_k[,,depth+1])) # [[3]] returns depth-level receiver
}
agent.LN(1,1,-1,2,5)
agent.LN(1,1,-1,2,2)
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
# depth is 0-indexed
agent.LN <- function(a, alph, m, mu, depth){
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
if(depth > 0){
for(d in 2:(depth+1)){
store.s.ksay_k[,,d] = sender(a, alph, m, mu, store.r.kest_ksay[,,d-1])
print(store.s.ksay_k[,,d])
store.r.kest_ksay[,,d] = receiver(store.s.ksay_k[,,d])
print(store.r.kest_ksay[,,d])
store.r.kest_k[,,d] = receiver.k(store.s.ksay_k[,,d])
}
}
# return last level of sender and receivers
# return(list(store.s.ksay_k[,,depth+1], # [[1]] returns depth-level sender
#             store.r.kest_ksay[,,depth+1], # [[2]] returns depth-level receiver
#             store.r.kest_k[,,depth+1])) # [[3]] returns depth-level receiver
}
agent.LN(1,1,-1,2,2) # 3rd level deceptive agent
agent.LN(1,1,-1,2,0) # 3rd level deceptive agent
agent.LN(1,1,-1,2,1) # 3rd level deceptive agent
d
store.s.ksay_k <- array(NA, dim=c(n,n,depth+1))
store.r.kest_ksay <- array(NA, dim=c(n,n,depth+1))
store.r.kest_k <- array(NA, dim=c(n,n,depth+1))
p.r0 = r.0()
store.s.ksay_k[,,1] = NA
store.r.kest_ksay[,,1] = p.r0
store.r.kest_k[,,1] = NA
depth=1
store.s.ksay_k[,,d] = sender(a, alph, m, mu, store.r.kest_ksay[,,d-1])
store.s.ksay_k[,,d] = sender(a, alph, m, mu, store.r.kest_ksay[,,d-1])
