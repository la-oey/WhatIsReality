axis.title.y = element_text(size = 30),
strip.text = element_text(size=15, colour="black"),
legend.position = legend
)
}
data
}
gen_line(fulldata=flights,
x="weekday",
y="dep_delay",
#color="carrier",
#line="sched_time_of_day",
group_facet="origin")
gen_line(fulldata=flights,
x="weekday",
y="dep_delay")
flights
gen_line(fulldata=flights,
x="distance",
y="dep_delay")
read_csv("datasets_expt2/flights.csv")
# flight categories: [x1 = carrier, x2 = origin, y = distance]
flights <- read_csv("datasets_expt2/flights.csv") %>%
filter(carrier %in% c("UA","B6","DL","AA")) %>%
mutate(carrier = case_when(
carrier == "UA" ~ "United",
carrier == "B6" ~ "JetBlue",
carrier == "DL" ~ "Delta",
carrier == "AA" ~ "American"
),
origin = case_when(
origin == "EWR" ~ "Newark",
origin == "JFK" ~ "JFK",
origin == "LGA" ~ "LaGuardia"
),
date_month = str_pad(month, 2, pad="0"),
date_day = str_pad(day, 2, pad="0"),
date = as.Date(paste(year, date_month, date_day, sep="-")),
weekday = weekdays(date),
weekday = factor(weekday,
levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
sched_time_of_day = case_when(
sched_dep_time < 1200 ~ "morning",
sched_dep_time < 1800 ~ "afternoon",
sched_dep_time >= 1800 ~ "evening"
),
sched_time_of_day = factor(sched_time_of_day, levels=c("morning","afternoon","evening"))) %>%
select(month, sched_time_of_day, carrier, origin, air_time, distance, dep_delay) %>%
na.omit() #%>%
gen_line(fulldata=flights,
x="month",
y="dep_delay",
#color="carrier",
#line="sched_time_of_day",
group_facet="origin")
gen_line(fulldata=flights,
x="month",
y="dep_delay",
color="carrier",
line="sched_time_of_day",
group_facet="origin")
gen_line <- function(fulldata,
x,
y,
color="none", # c("none", [name of group]) #discrete or continuous
line="none", # c("none", [name of group]) #discrete
group_facet="none", # c("none", [name of group])
legend="right",
xtitle="", # c("", [rename xtitle])
ytitle=""){ # c("", [rename ytitle])
data <- fulldata
num.x <- data %>% #number of x categories
distinct(.data[[x]]) %>%
nrow()
data <- data %>%
ggplot(aes(x=.data[[x]], y=.data[[y]])) +
xlab(x) +
ylab(y) +
theme_light() +
theme(axis.text.x = element_text(size = 18, angle=0, hjust=0.5),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30),
legend.position = legend
)
if(color == "none" & line == "none"){
data <- data +
geom_line(stat="summary", linetype=LINE, colour=EDGE, alpha=ALPH, size=WIDTH)
} else if(color == "none" & line != "none"){
data <- data +
geom_line(stat="summary",
aes(linetype=.data[[line]]),
colour=EDGE, alpha=ALPH, size=WIDTH)
} else if(color != "none" & line == "none"){
data <- data +
geom_line(stat="summary",
aes(colour=.data[[color]]),
linetype=LINE, alpha=ALPH, size=WIDTH)
} else if(color != "none" & line != "none"){
data <- data +
geom_line(stat="summary",
aes(colour=.data[[color]], linetype=.data[[line]]),
alpha=ALPH, size=WIDTH)
}
if(xtitle != ""){
data <- data + xlab(xtitle)
}
if(ytitle != ""){
data <- data + ylab(ytitle)
}
if(group_facet != "none"){
data <- data + facet_wrap(~.data[[group_facet]]) +
theme(axis.text.x = element_text(size = 15, angle=45, hjust=1),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30),
strip.text = element_text(size=15, colour="black"),
legend.position = legend
)
}
data
}
flights1 %>%
mutate(dep_delay = ifelse(is.na(dep_delay), 0, dep_delay),
distance.f = case_when(
distance < 500 ~ "very short",
distance >= 500 & distance < 1000 ~ "short",
distance >= 1000 & distance < 2000 ~ "medium",
distance >= 2000 ~ "long"
)) %>%
gen_line(fulldata=.,
x="month",
y="dep_delay",
color="origin",
line="carrier",
group_facet="distance.f") +
scale_x_continuous(breaks=c(3,12,3))
flights1 %>%
mutate(dep_delay = ifelse(is.na(dep_delay), 0, dep_delay),
distance.f = case_when(
distance < 500 ~ "very short",
distance >= 500 & distance < 1000 ~ "short",
distance >= 1000 & distance < 2000 ~ "medium",
distance >= 2000 ~ "long"
)) %>%
gen_line(fulldata=.,
x="month",
y="dep_delay",
color="origin",
line="carrier",
group_facet="distance.f") +
scale_x_continuous(breaks=seq(3,12,3))
# flight categories: [x1 = carrier, x2 = origin, y = distance]
flights <- read_csv("datasets_expt2/flights.csv") %>%
filter(carrier %in% c("UA","B6","DL","AA")) %>%
mutate(carrier = case_when(
carrier == "UA" ~ "United",
carrier == "B6" ~ "JetBlue",
carrier == "DL" ~ "Delta",
carrier == "AA" ~ "American"
),
origin = case_when(
origin == "EWR" ~ "Newark",
origin == "JFK" ~ "JFK",
origin == "LGA" ~ "LaGuardia"
),
date_month = str_pad(month, 2, pad="0"),
date_day = str_pad(day, 2, pad="0"),
date = as.Date(paste(year, date_month, date_day, sep="-")),
weekday = weekdays(date),
weekday = factor(weekday,
levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
weekday.n = as.numeric(weekday),
sched_time_of_day = case_when(
sched_dep_time < 1200 ~ "morning",
sched_dep_time < 1800 ~ "afternoon",
sched_dep_time >= 1800 ~ "evening"
),
sched_time_of_day = factor(sched_time_of_day, levels=c("morning","afternoon","evening"))) %>%
select(weekday.n, sched_time_of_day, carrier, origin, air_time, distance, dep_delay) %>%
na.omit() #%>%
flights
# flight categories: [x1 = carrier, x2 = origin, y = distance]
flights <- read_csv("datasets_expt2/flights.csv") %>%
filter(carrier %in% c("UA","B6","DL","AA")) %>%
mutate(carrier = case_when(
carrier == "UA" ~ "United",
carrier == "B6" ~ "JetBlue",
carrier == "DL" ~ "Delta",
carrier == "AA" ~ "American"
),
origin = case_when(
origin == "EWR" ~ "Newark",
origin == "JFK" ~ "JFK",
origin == "LGA" ~ "LaGuardia"
),
date_month = str_pad(month, 2, pad="0"),
date_day = str_pad(day, 2, pad="0"),
date = as.Date(paste(year, date_month, date_day, sep="-")),
weekday = weekdays(date),
weekday = factor(weekday,
levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
weekday.n = as.numeric(weekday),
sched_time_of_day = case_when(
sched_dep_time < 1200 ~ "morning",
sched_dep_time < 1800 ~ "afternoon",
sched_dep_time >= 1800 ~ "evening"
),
sched_time_of_day = factor(sched_time_of_day, levels=c("morning","afternoon","evening"))) %>%
select(weekday, weekday.n, sched_time_of_day, carrier, origin, air_time, distance, dep_delay) %>%
na.omit() #%>%
flights
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggthemes)
library(ggtext)
trials <- read_csv("trials.csv") %>%
mutate(goal = paste0(goal, "estimate"),
goal = as.factor(goal),
cost = ifelse(cost=="unif", "linear", "quadratic"),
cond = paste(goal, cost))
sender <- trials %>% filter(roleCurrent=="sender")
receiver <- trials %>% filter(roleCurrent=="receiver")
fontfam = "Optima"
panelcolor = "#dee4f0"
condcolors = c("#cc7667","#8b2f00","#679cd0","#003c70")
trials %>%
distinct(subjID, goal, cost) %>%
count(goal, cost)
cor.test(sender$ksay, sender$k) # r = 0.76, t(9977) = 115.21, p < 0.0001
cor(sender$ksay, sender$k)^2 # r^2 = 0.57
contrasts(sender$goal) <- contr.sum(2)
summary(lmer(ksay ~ k + (1 | subjID), data=sender))$coef
summary(lmer(ksay ~ k + goal + (1 | subjID), data=sender))$coef
s.diff.df <- sender %>%
mutate(kdiffs = ksay - k,
costtype = ifelse(cost == "linear", "low", "high"),
cost = paste(costtype, cost, "cost"),
cost = factor(cost, levels=c("low linear cost", "high quadratic cost")),
goal = paste(goal, "goal"))
s.bias <- sender %>%
group_by(goal, cost) %>%
summarise(bias.ksay = mean(ksay-k),
median.ksay = median(ksay-k)) %>%
mutate(bias = round(bias.ksay, 1),
bias = ifelse(bias > 0, paste0("+",bias), as.character(bias)),
bias = ifelse(bias == "+8", "'+8.0'", bias),
bias = paste0("Delta[message - truth] == ", bias),
costtype = ifelse(cost == "linear", "low", "high"),
cost = paste(costtype, cost, "cost"),
cost = factor(cost, levels=c("low linear cost", "high quadratic cost")),
goal = paste(goal, "goal"))
r.diff.df <- receiver %>%
mutate(kdiffs = kest - ksay,
costtype = ifelse(cost == "linear", "low", "high"),
cost = paste(costtype, cost, "cost"),
cost = factor(cost, levels=c("low linear cost", "high quadratic cost")),
goal = paste(goal, "goal"))
r.bias <- receiver %>%
group_by(goal, cost) %>%
summarise(bias.kest = mean(kest-ksay),
median.kest = median(kest-ksay)) %>%
mutate(bias = round(bias.kest, 1),
bias = ifelse(bias > 0, paste0("+",bias), as.character(bias)),
bias = paste0("Delta[estimate - message] == ", bias),
costtype = ifelse(cost == "linear", "low", "high"),
cost = paste(costtype, cost, "cost"),
cost = factor(cost, levels=c("low linear cost", "high quadratic cost")),
goal = paste(goal, "goal"))
ggplot() +
geom_rect(data=s.diff.df, aes(xmin=-88, xmax=88, ymin=-1750, ymax=0), fill="gray40") +
geom_vline(xintercept = 0) +
geom_segment(data=s.bias, aes(x=bias.ksay, xend=bias.ksay, y=0, yend=1750), colour="gray60") +
geom_segment(data=r.bias, aes(x=bias.kest, xend=bias.kest, y=0, yend=-1750), colour="gray60") +
geom_histogram(data=s.diff.df, aes(x=kdiffs, y=..count.., fill=cond), colour="black") +
geom_histogram(data=r.diff.df, aes(x=kdiffs, y=-..count.., fill=cond), colour="black") +
geom_text(data=data.frame(goal="overestimate goal"),
aes(x=-70, y=200, label="Sender"), parse=TRUE,
family=fontfam) +
geom_text(data=data.frame(goal="overestimate goal"),
aes(x=-70, y=-200, label="Judge"), parse=TRUE, colour="white",
family=fontfam) +
geom_text(data=s.bias, aes(x=47, y=1000, label=bias),
parse=TRUE, family=fontfam) +
geom_text(data=r.bias, aes(x=47, y=-1000, label=bias),
parse=TRUE, colour="white", family=fontfam) +
scale_x_continuous("Bias", limits=c(-88,88), expand=c(0,0)) +
scale_y_continuous("Count",
limits=c(-1750,1750), expand=c(0,0),
breaks=seq(-1500,1500,500), labels=c(seq(1500,0,-500),seq(500,1500,500))) +
scale_fill_manual(values=condcolors) +
facet_grid(cost ~ goal) +
guides(fill=FALSE) +
theme_classic() +
theme(strip.background = element_rect(fill=panelcolor),
strip.text = element_text(size=13, family=fontfam),
panel.spacing = unit(0.8, "lines"),
axis.title = element_text(size=13, family=fontfam),
axis.text = element_text(size=11, family=fontfam))
ggsave("img/final_manuscript/player_hist.png", width=7.5, height=5)
# saving as pdf throws an "invalid font type" error
sender.stat <- sender %>%
mutate(bias.ksay = ksay - k,
goal = as.factor(goal),
goal.c = goal,
cost = as.factor(cost))
# sender overestimates > 0
sender.stat %>% # xbar = 5.59
filter(goal == "overestimate") %>%
summarise(mean = mean(bias.ksay))
sender.stat %>% # t(5056) = 29.09
filter(goal == "overestimate") %>%
pull(bias.ksay) %>%
t.test(alternative="greater", mu=0)
# t$statistic
# t$parameter #df
# t$p.value
t.test(filter(sender.stat,goal == "overestimate")$ksay, filter(sender.stat,goal == "overestimate")$k, paired=T) #equivalent
# linear model
summary(lmer(bias.ksay ~ goal + (1|subjID), data=sender.stat))
summary(lmer(bias.ksay ~ (1|subjID) + (1|k), data=filter(sender.stat, goal=="overestimate"))) #beta = 5.98, t(162) = 5.99, p < 0.0001
# sender underestimates < 0
sender.stat %>% # xbar = -4.33
filter(goal == "underestimate") %>%
summarise(mean = mean(bias.ksay))
sender.stat %>% # t(4921) = -24.00
filter(goal == "underestimate") %>%
pull(bias.ksay) %>%
t.test(alternative="less", mu=0)
#linear model
summary(lmer(bias.ksay ~ (1|subjID) + (1|k), data=filter(sender.stat, goal=="underestimate"))) #beta = -4.46, t(132) = -5.50, p < 0.0001
contrasts(sender.stat$goal.c) <- contr.sum(2)
# contrasts(sender.stat$cost) <- contr.treatment(2)
summary(lmer(bias.ksay ~ goal.c + (1 | subjID), data=sender.stat))
summary(lmer(bias.ksay ~ goal.c + goal:cost + (1 | subjID), data=sender.stat))
summary(lmer(bias.ksay ~ goal.c * cost + (1 | subjID), data=sender.stat))
summary(lm(bias.ksay ~ goal.c + goal:cost, data=sender.stat))
summary(lmer(ksay ~ k + goal.c + (1 | subjID), data=sender.stat))
summary(lmer(ksay ~ k + goal.c + goal:cost + (1 | subjID), data=sender.stat))
summary(lmer(ksay ~ k + goal.c * cost + (1 | subjID), data=sender.stat)) #this will do
summary(lmer(ksay ~ k + goal.c * cost + (1 | subjID), data=sender.stat))$coef
m.full <- lmer(ksay ~ k * goal.c * cost + (1 | subjID), data=sender.stat)
summary(m.full)
m.noInterKGoal <- lmer(ksay ~ k + goal.c * cost + k:cost + k:goal + (1 | subjID), data=sender.stat)
summary(m.noInterKGoal)
anova(m.full, m.noInterKGoal)
s.over <- sender.stat %>%
filter(goal == "overestimate")
mean(filter(s.over, cost=="linear")$bias.ksay) - mean(filter(s.over, cost=="quadratic")$bias.ksay) # dbar = 5.09
t.test(filter(s.over, cost=="linear")$bias.ksay, # t(3679) = 14.13
filter(s.over, cost=="quadratic")$bias.ksay,
alternative="greater", var.equal=FALSE)
contrasts(s.over$cost) <- c(1,0)
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|k), data=s.over)) #beta = 4.86, t(102) = 3.00, p = .003
s.under <- sender.stat %>%
filter(goal == "underestimate")
mean(filter(s.under, cost=="linear")$bias.ksay) - mean(filter(s.under, cost=="quadratic")$bias.ksay) # dbar = -5.25
t.test(filter(s.under, cost=="linear")$bias.ksay, # t(2834) = -14.16
filter(s.under, cost=="quadratic")$bias.ksay,
alternative="less", var.equal=FALSE)
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|k), data=s.under)) #beta = 5.21, t(98) = 3.74, p < .001
#combined
s.comb <- s.under %>%
mutate(bias.ksay = -bias.ksay) %>%
bind_rows(s.over) %>%
mutate(cost = factor(cost, levels=c("quadratic","linear")))
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|k), data=s.comb)) #beta = 5.15, t(202) = 4.81, p < 0.0001
receiver.stat <- receiver %>%
mutate(bias.ksay = kest - ksay,
goal = as.factor(goal),
goal.c = goal,
cost = as.factor(cost))
# receiver  kest - ksay < 0
receiver.stat %>% # xbar = -6.86
filter(goal == "overestimate") %>%
summarise(mean = mean(bias.ksay))
receiver.stat %>% # t(5167) = -39.85
filter(goal == "overestimate") %>%
pull(bias.ksay) %>%
t.test(alternative="less", mu=0)
summary(lmer(bias.ksay ~ (1|subjID) + (1|ksay), data=filter(receiver.stat, goal=="overestimate"))) #beta = -6.84, t(148) = -7.31, p < 0.0001
contrasts(receiver.stat$goal.c) <- c(1,-1)
summary(lmer(bias.ksay ~ goal.c + (1 | subjID), data=receiver.stat))
# receiver  kest - ksay > 0
receiver.stat %>% # xbar = 5.83
filter(goal == "underestimate") %>%
summarise(mean = mean(bias.ksay))
receiver.stat %>% # t(3275) = 27.45
filter(goal == "underestimate") %>%
pull(bias.ksay) %>%
t.test(alternative="greater", mu=0)
summary(lmer(bias.ksay ~ (1|subjID) + (1|ksay), data=filter(receiver.stat, goal=="underestimate"))) #beta = 5.33, t(159) = 7.20, p < 0.0001
r.over <- receiver.stat %>%
filter(goal == "overestimate")
mean(filter(r.over, cost=="linear")$bias.ksay) - mean(filter(r.over, cost=="quadratic")$bias.ksay) # dbar = -3.22
t.test(filter(r.over, cost=="linear")$bias.ksay, # t(5057) = -9.63
filter(r.over, cost=="quadratic")$bias.ksay,
alternative="less", var.equal=FALSE)
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|ksay), data=r.over)) #beta = 3.21, t(102) = 2.77, p = .007
r.under <- receiver.stat %>%
filter(goal == "underestimate")
mean(filter(r.under, cost=="linear")$bias.ksay) - mean(filter(r.under, cost=="quadratic")$bias.ksay) # dbar = 2.50
t.test(filter(r.under, cost=="linear")$bias.ksay, # t(4080) = 7.63
filter(r.under, cost=="quadratic")$bias.ksay,
alternative="greater", var.equal=FALSE)
#combined analysis
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|ksay), data=r.under)) #beta = -2.48, t(98) = -2.12, p = .037
#combined
r.comb <- r.under %>%
mutate(bias.ksay = -bias.ksay) %>%
bind_rows(r.over) %>%
mutate(cost = factor(cost, levels=c("quadratic","linear")))
summary(lmer(bias.ksay ~ cost + (1|subjID) + (1|k), data=r.comb)) #beta = -2.96, t(202) = -3.53, p < 0.001
summary(lmer(bias.ksay ~ goal + (1|subjID) + (1|ksay),
data=mutate(receiver.stat,
bias.ksay = ifelse(goal == "overestimate", -bias.ksay, bias.ksay)))) #beta = -1.16, t(203) = -1.36, p = 0.18
trials.stat <- trials %>%
mutate(bias = case_when(roleCurrent == "receiver" ~ kest - ksay,
roleCurrent == "sender" ~ ksay - k),
bias.isPositive = bias > 0,
bias = ifelse(roleCurrent == "receiver", -bias, bias),
abs.bias = abs(bias),
goal = as.factor(goal),
goal.c = goal,
cost = as.factor(cost))
summary(lmer(bias ~ roleCurrent + (1|subjID), data=trials.stat)) #no signif
summary(lmer(abs.bias ~ roleCurrent + (1|subjID), data=trials.stat)) #signif
full.model = lmer(abs.bias ~ goal + cost + roleCurrent + (1|subjID), data=trials.stat)
noRole.model = lmer(abs.bias ~ goal + cost + (1|subjID), data=trials.stat)
anova(full.model, noRole.model, test="LRT")
r.2 <- receiver %>%
mutate(cost = paste(cost, "cost"),
goal = paste(goal, "goal"))
abline.col = "gray40"
ai.col = "black"
ggplot(r.2, aes(x=k, y=kest, colour=cond)) +
geom_abline(slope=1, colour=abline.col, size=0.3) +
# geom_jitter(data=r2, aes(x=k, y=ksay), colour=ai.col, size=0.1, alpha=0.2) +
geom_jitter(size=0.5, alpha=0.1) +
geom_smooth(data=r.2, aes(x=k, y=ksay), method="lm", se=FALSE, size=1, colour=ai.col, alpha=0.5) +
geom_smooth(method="lm", se=FALSE, size=1) +
geom_hline(aes(yintercept=-Inf), colour="black", size=0.5, linetype="solid") +
geom_vline(aes(xintercept=-Inf), colour="black", size=0.5, linetype="solid") +
scale_x_continuous("Actual Truth", limits=c(0,100), expand=c(0,0)) +
scale_y_continuous("Inferred Truth", limits=c(0,100), expand=c(0,0)) +
scale_colour_manual(values=condcolors) +
guides(colour=FALSE) +
facet_grid(cost ~ goal) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white", colour="white"),
strip.background = element_rect(fill=panelcolor),
strip.text = element_text(size=15, family="Optima"),
panel.spacing = unit(1, "lines"),
axis.title = element_text(size=15, family="Optima"),
axis.text = element_text(size=11, family="Optima"))
ggsave("img/final/bias_lines.png", width=6,height=5.6)
receiver %>%
group_by(goal, cost) %>%
summarise(bias.ksay = mean(ksay-k),
bias.kest = mean(kest-k))
condcolors2 = c("#679cd0","#003c70","#cc7667","#8b2f00")
s2 <- sender %>%
group_by(subjID, cost, goal, cond) %>%
summarise(mean.ksay = mean(ksay-k))
c(min(s2$mean.ksay),max(s2$mean.ksay))
r2 <- receiver %>%
group_by(subjID) %>%
summarise(mean.kest = mean(kest-ksay))
c(min(r2$mean.kest),max(r2$mean.kest))
sr.2 <- s2 %>%
left_join(r2) %>%
mutate(cond = paste(cost, goal),
cond = factor(cond,
levels=c("linear underestimate",
"quadratic underestimate",
"linear overestimate",
"quadratic overestimate")))
sr.2.summ <- sr.2 %>%
group_by(cond) %>%
summarise(r.mean = mean(mean.kest),
r.se = sd(mean.kest)/sqrt(n()),
s.mean = mean(mean.ksay),
s.se = sd(mean.ksay)/sqrt(n()))
ggplot(sr.2, aes(x=mean.ksay, y=mean.kest, colour=cond)) +
geom_hline(yintercept=0, colour="gray40", size=0.3) +
geom_vline(xintercept=0, colour="gray40", size=0.3) +
geom_point(size=1, alpha=0.3, show.legend = FALSE) +
# geom_smooth(method="lm") +
stat_ellipse(size=0.6) +
geom_point(data=sr.2.summ, aes(x=s.mean, y=r.mean, fill=cond),
shape=23, colour="black", size=2.5) +
# geom_linerange(data=sr.2.summ,
#                aes(x=s.mean, y=r.mean, ymin=r.mean-r.se, ymax=r.mean+r.se),
#                size=0.8, show.legend = FALSE) +
# geom_linerange(data=sr.2.summ,
#                aes(x=s.mean, xmin=s.mean-s.se, xmax=s.mean+s.se, y=r.mean),
#                size=0.8, show.legend = FALSE) +
scale_x_continuous("Individual Sender's Mean *Report - Truth*", limits=c(-40, 40)) +
scale_y_continuous("Individual Judge's Mean *Inferred - Report*",
limits=c(-40, 40)) +
scale_colour_manual("", values=condcolors2) +
scale_fill_manual("", values=condcolors2) +
# facet_wrap(~cost) +
theme_classic() +
theme(legend.position = c(0.74, 0.88),
strip.background = element_rect(fill=panelcolor),
text=element_text(size=13, family="Optima"),
axis.title.x = element_markdown(),
axis.title.y = element_markdown())
ggsave("img/final/indiv_lambda.png", width=5, height=4.5)
